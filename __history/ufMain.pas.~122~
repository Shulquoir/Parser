unit ufMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtDlgs, Vcl.Buttons, ShellAPI;

type
  TForm1 = class(TForm)
    ePathDFN: TEdit;
    bCreateTSV: TButton;
    ePathTSV: TEdit;
    ePathDFN2: TEdit;
    bOpenExcel: TButton;
    bOpenCalc: TButton;
    bWriteDFN: TButton;
    odOpenDFN: TOpenDialog;
    odOpenTSV: TOpenDialog;
    odOpenDFN2: TOpenDialog;
    spChooseDFN: TSpeedButton;
    Label1: TLabel;
    spChooseTSV: TSpeedButton;
    Label2: TLabel;
    spChooseDFN2: TSpeedButton;
    Label3: TLabel;
    sdSaveTSV: TSaveDialog;
    OpenDialog4: TOpenDialog;
    OpenDialog5: TOpenDialog;
    sdSaveDFN: TSaveDialog;
    procedure ePathDFNKeyPress(Sender: TObject; var Key: Char);
    procedure spChooseDFNClick(Sender: TObject);
    procedure spChooseTSVClick(Sender: TObject);
    procedure spChooseDFN2Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure bCreateTSVClick(Sender: TObject);
    procedure bOpenExcelClick(Sender: TObject);
    procedure bOpenCalcClick(Sender: TObject);
    procedure ePathTSVKeyPress(Sender: TObject; var Key: Char);
    procedure ePathDFN2KeyPress(Sender: TObject; var Key: Char);
    procedure bWriteDFNClick(Sender: TObject);
  private
    { Private declarations }
    function ContainsCyrillicCharacters(const input: string): Boolean;
    function IsCharCyrillic(c: Char): Boolean;
    function ExtractFieldValue(const field: string): string;
    function ExtractField(const fields: TArray<string>; const fieldName: string): string;
  public
    { Public declarations }

  end;

var
  Form1: TForm1;
  OriginalDFNFileContent, OriginalTSVFileContent, OriginalDFN2FileContent: TStringList; // Створюємо глобальну змінну, яка буде зберігати контент відкритого файлу до моменту переобрання або зберігання файлу
  OpenedDFNFilePath, OpenedTSVFilePath, OpenedDFN2FilePath: String; // Створюємо глобальні змінні, які будуть зберігати шлях відкритих файлів
  SavedTSVFilePath: String; // Створюємо глобальну змінну для зберігання шляху збереженого TSV файлу для можливості відкрити його в сторонніх програмах
  IsFileCreate: boolean = false; // Змінна для перевірки, чи був збережений TSV файл, для відкриття його в сторонніх програмах

implementation

{$R *.dfm}

procedure TForm1.bCreateTSVClick(Sender: TObject);

var OutputFileContent: TStringList; // Створюємо змінну для зберігання форматованого контенту файлу

begin
  if OriginalDFNFileContent <> nil then // Перевірка чи був відкритий файл
  begin
    sdSaveTSV.FileName := ChangeFileExt(ExtractFileName(OpenedDFNFilePath), '.tsv'); // Отримуємо пропоноване ім'я файлу для зберігання, через ім'я відкритого файлу з заміною формата
    if sdSaveTSV.Execute then  // Перевірка чи була натиснута кнопка збереження файлу в діалоговому вікні
    begin
      IsFileCreate := true;
      OutputFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
      try
        OutputFileContent.Add('ID' + #9 + 'Значения' + #9 + 'Перевод'); // Додаємо першу строку в змінну, яка відповідає за форматований контент файлу
        for var i := 0 to OriginalDFNFileContent.Count - 1 do
        begin
          var line := OriginalDFNFileContent[i]; //
          if ContainsCyrillicCharacters(line) and
          (Pos('ID', line) > 0) and (Pos('Orig', line) > 0) and (Pos('Curr', line) > 0) then //
          begin
            var fields := line.Split([#4]);
            if Length(fields) >= 3 then
            begin
              var id := ExtractFieldValue(ExtractField(fields, 'ID'));
              var orig := ExtractFieldValue(ExtractField(fields, 'Orig'));
              var curr := ExtractFieldValue(ExtractField(fields, 'Curr'));
              OutputFileContent.Add(id + #9 + orig + #9 + curr);
            end;
          end;
        end;
        if Pos('.tsv', sdSaveTSV.FileName) > 0 then // Перевірка чи є в імені зберігаємого файлу розширення tsv
          OutputFileContent.SaveToFile(sdSaveTSV.FileName) // Запис форматованого контенту в зберігаємий файл
        else
          OutputFileContent.SaveToFile(sdSaveTSV.FileName + '.tsv'); // Запис форматованого контенту в зберігаємий файл з дописуванням формату

        SavedTSVFilePath := sdSaveTSV.FileName; // Записуємо шлях створеного файлу
        ShowMessage('Файл був успішно сконвертований та збережений у форматі TSV.' + sdSaveTSV.FileName);
      finally
        OutputFileContent.Free;
      end;
    end;
  end
  else
    ShowMessage('Спочатку відкрийте файл DFN.');
end;

procedure TForm1.bWriteDFNClick(Sender: TObject);

var i, j: Integer;
    FieldA, FieldB: string;
begin
   if ChangeFileExt(ExtractFileName(odOpenTSV.FileName), '') <> ChangeFileExt(ExtractFileName(odOpenDFN2.FileName), '') then
  begin
    ShowMessage('Please open matching TSV and DFN files before searching for common fields.');
    Exit;
  end;

   if (OriginalTSVFileContent <> nil) and (OriginalDFN2FileContent <> nil) then
   begin
     try
       //FindCurr := TStringList.Create;
       // Замінюємо поля "Curr" у файлі DFN
       for i := 0 to OriginalTSVFileContent.Count - 1 do
       begin
         FieldA := OriginalTSVFileContent[i].Split([#9])[0];
         for j := 0 to OriginalDFN2FileContent.Count - 1 do
         begin
           FieldB := OriginalDFN2FileContent[j].Split([#4])[0].Substring(Pos('ID:', OriginalDFN2FileContent[j].Split([#4])[0]) + 2); // Знаходження значення після "ID:";
           if Pos(FieldA, FieldB) = 1 then // Перевіряємо, чи поле починається з ідентичного поля
           begin
             for var x := 0 to Length(OriginalDFN2FileContent[j].Split([#4])) - 1 do
             begin
               ShowMessage(OriginalDFN2FileContent[j].Split([#4])[x]);
               if Pos('Curr:', OriginalDFN2FileContent[j].Split([#4])[x]) >= 1 then
               begin
                 OriginalDFN2FileContent[j] :=
                 OriginalDFN2FileContent[j].Replace
                 (OriginalDFN2FileContent[j].Split([#4])[x], 'Curr:' + QuotedStr(OriginalTSVFileContent[i].Split([#9])[2]));

                 ShowMessage('оригінал' + OriginalTSVFileContent[i].Split([#9])[2] + 'було записано' + OriginalDFN2FileContent[j].Split([#4])[x]);
                 Break; // Вийти з циклу, якщо знайдено відповідне поле
               end;
             end;
           Break;
           end;
         end;
       end;

       // Збереження оновленого файлу DFN
        OriginalDFN2FileContent.SaveToFile(odOpenDFN2.FileName);
        ShowMessage('Файл DFN був оновлений.');
     finally
       OriginalTSVFileContent.Free;
       OriginalDFN2FileContent.Free;
     end;
   end
   else
   ShowMessage('Откройте TSV и DFN файлы!');
end;

procedure TForm1.spChooseDFNClick(Sender: TObject);
begin
  if odOpenDFN.Execute then // Перевірка чи була натиснута кнопка відкриття обраного файлу
  begin
    try
      if OriginalDFNFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
        OriginalDFNFileContent.Free; // Звільнюємо попередній вміст, якщо був

      ePathDFN.Text := odOpenDFN.FileName; // Записуємо шлях до файла в відповідне поле "edit"
      OriginalDFNFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
      OriginalDFNFileContent.LoadFromFile(odOpenDFN.FileName); // Записуємо контент з відкритого файлу
      OpenedDFNFilePath := odOpenDFN.FileName; // Записуємо шлях відкритого файлу в глобальну змінну
      ShowMessage('Файл DFN був відкритий.');
    except
      on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
    end;
  end;
end;

procedure TForm1.ePathDFNKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then // Якщо була натиснута клавіша #13 - код клавіші "Enter"
  begin
    if FileExists(ePathDFN.Text) then // Перевірка чи існує файл
    begin
      try
        if OriginalDFNFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
          OriginalDFNFileContent.Free; // Звільнюємо попередній вміст, якщо був

        OriginalDFNFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
        OriginalDFNFileContent.LoadFromFile(ePathDFN.Text); // Записуємо контент з відкритого файлу
        OpenedDFNFilePath := ePathDFN.Text; // Записуємо шлях відкритого файлу в глобальну змінну
        ShowMessage('Файл відкрито: ' + ePathDFN.Text);
      except
        on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
      end;
    end
    else
    begin
    ShowMessage('Файл не існує: ' + ePathDFN.Text); // Якщо був введений не коректний шлях до файлу
    end;
  end;
end;

procedure TForm1.spChooseTSVClick(Sender: TObject);
begin
  if odOpenTSV.Execute then // Перевірка чи була натиснута кнопка відкриття обраного файлу
  begin
    try
      if OriginalTSVFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
        OriginalTSVFileContent.Free; // Звільнюємо попередній вміст, якщо був

      ePathTSV.Text := odOpenTSV.FileName; // Записуємо шлях до файла в відповідне поле "edit"
      OriginalTSVFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
      OriginalTSVFileContent.LoadFromFile(odOpenTSV.FileName); // Записуємо контент з відкритого файлу
      OpenedTSVFilePath := odOpenTSV.FileName; // Записуємо шлях відкритого файлу в глобальну змінну
      ShowMessage('Файл TSV був відкритий.');
    except
      on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
    end;
  end;
end;

procedure TForm1.ePathTSVKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then // Якщо була натиснута клавіша #13 - код клавіші "Enter"
  begin
    if FileExists(ePathTSV.Text) then // Перевірка чи існує файл
    begin
      try
        if OriginalTSVFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
          OriginalTSVFileContent.Free; // Звільнюємо попередній вміст, якщо був

        OriginalTSVFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
        OriginalTSVFileContent.LoadFromFile(ePathTSV.Text); // Записуємо контент з відкритого файлу
        OpenedTSVFilePath := ePathTSV.Text; // Записуємо шлях відкритого файлу в глобальну змінну
        ShowMessage('Файл відкрито: ' + ePathTSV.Text);
      except
        on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
      end;
    end
    else
    begin
    ShowMessage('Файл не існує: ' + ePathTSV.Text); // Якщо був введений не коректний шлях до файлу
    end;
  end;
end;

procedure TForm1.spChooseDFN2Click(Sender: TObject);
begin
  if odOpenDFN2.Execute then // Перевірка чи була натиснута кнопка відкриття обраного файлу
  begin
    try
      if OriginalDFN2FileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
        OriginalDFN2FileContent.Free; // Звільнюємо попередній вміст, якщо був

      ePathDFN2.Text := odOpenDFN2.FileName; // Записуємо шлях до файла в відповідне поле "edit"
      OriginalDFN2FileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
      OriginalDFN2FileContent.LoadFromFile(odOpenDFN2.FileName); // Записуємо контент з відкритого файлу
      OpenedDFN2FilePath := odOpenDFN2.FileName; // Записуємо шлях відкритого файлу в глобальну змінну
      ShowMessage('Файл DFN був відкритий.');
    except
      on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
    end;
  end;
end;

procedure TForm1.ePathDFN2KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then // Якщо була натиснута клавіша #13 - код клавіші "Enter"
  begin
    if FileExists(ePathDFN2.Text) then // Перевірка чи існує файл
    begin
      try
        if OriginalDFN2FileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
          OriginalDFN2FileContent.Free; // Звільнюємо попередній вміст, якщо був

        OriginalDFN2FileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
        OriginalDFN2FileContent.LoadFromFile(ePathDFN2.Text); // Записуємо контент з відкритого файлу
        OpenedDFN2FilePath := ePathDFN2.Text; // Записуємо шлях відкритого файлу в глобальну змінну
        ShowMessage('Файл відкрито: ' + ePathDFN2.Text);
      except
        on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
      end;
    end
    else
    begin
    ShowMessage('Файл не існує: ' + ePathDFN2.Text); // Якщо був введений не коректний шлях до файлу
    end;
  end;
end;

procedure TForm1.bOpenExcelClick(Sender: TObject);
var
  ExcelPath: string;
begin
  ExcelPath := 'C:\Program Files\Microsoft Office\root\Office16\excel.exe';
  if IsFileCreate then
  begin
    if FileExists(ExcelPath) then
    begin
      if IsFileCreate then
      begin
        ShellExecute(0, 'open', PChar(ExcelPath), PChar('"'+SavedTSVFilePath+'"'), nil, SW_SHOW);
      end;
    end
    else
    begin
      ShowMessage('Excel не знайдено. Виберіть файл Excel через діалог.');
      if OpenDialog4.Execute then
      begin
        ShellExecute(0, 'open', PChar(OpenDialog4.FileName), PChar('"'+SavedTSVFilePath+'"'), nil, SW_SHOW);
      end;
    end;
  end
  else
    ShowMessage('Спочатку створіть TSV файл');
end;

procedure TForm1.bOpenCalcClick(Sender: TObject);
var
  CalcPath: string;
begin
  CalcPath := 'C:\Program Files\LibreOffice\program\soffice.exe';
  if IsFileCreate then
  begin
    if FileExists(CalcPath) then
    begin
      if IsFileCreate then
      begin
        ShellExecute(0, 'open', PChar(CalcPath), PChar('"'+SavedTSVFilePath+'"'), nil, SW_SHOW);
      end;
    end
    else
    begin
      ShowMessage('Calc не знайдено. Виберіть файл Calc через діалог.');
      if OpenDialog5.Execute then
      begin
        ShellExecute(0, 'open', PChar(OpenDialog5.FileName), PChar('"'+SavedTSVFilePath+'"'), nil, SW_SHOW);
      end;
    end;
  end
  else
    ShowMessage('Спочатку створіть TSV файл');
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  OriginalDFNFileContent.Free; // Звільняємо вміст скопійованого контенту з файлу при закритті застосунку.
end;

function TForm1.ContainsCyrillicCharacters(const input: string): Boolean; // Функція для перевірки чи є слова кирилицею
var i: Integer;
begin
  Result := False;
  for i := 1 to Length(input) do
  begin
    if IsCharCyrillic(input[i]) then
    begin
      Result := True;
      Exit;
    end;
  end;
end;

function TForm1.IsCharCyrillic(c: Char): Boolean; // Функція для перевірки чи є літера кирилицею
begin
  Result := (c >= 'А') and (c <= 'Я') or (c >= 'а') and (c <= 'я') or (c = 'Ё') or (c = 'ё');
end;

function TForm1.ExtractFieldValue(const field: string): string;
var
  colonPos: Integer;
  fieldValue: string;
begin
  colonPos := Pos(':', field);
  if colonPos > 0 then
  begin
    fieldValue := Trim(Copy(field, colonPos + 1, MaxInt));
    if (Length(fieldValue) >= 2) and (fieldValue[1] = '''') and (fieldValue[Length(fieldValue)] = '''') then
      Result := Copy(fieldValue, 2, Length(fieldValue) - 2)
    else
      Result := fieldValue;
  end
  else
    Result := '';
end;

function TForm1.ExtractField(const fields: TArray<string>; const fieldName: string): string;
begin
  for var field in fields do
  begin
    if Pos(fieldName, field) > 0 then
      Exit(Trim(Copy(field, Length(fieldName) + 1, MaxInt)));
  end;
  Result := '';
end;

end.
