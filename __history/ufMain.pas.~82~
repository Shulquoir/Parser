unit ufMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtDlgs, Vcl.Buttons, ShellAPI;

type
  TForm1 = class(TForm)
    ePath1: TEdit;
    bCreateTSV: TButton;
    ePath2: TEdit;
    ePath3: TEdit;
    bOpenExcel: TButton;
    bOpenCalc: TButton;
    bWriteDFN: TButton;
    OpenDialog1: TOpenDialog;
    OpenDialog2: TOpenDialog;
    OpenDialog3: TOpenDialog;
    spChooseDFN: TSpeedButton;
    Label1: TLabel;
    spChooseTSV: TSpeedButton;
    Label2: TLabel;
    spChooseDFN2: TSpeedButton;
    Label3: TLabel;
    SaveDialog1: TSaveDialog;
    procedure ePath1KeyPress(Sender: TObject; var Key: Char);
    procedure spChooseDFNClick(Sender: TObject);
    procedure spChooseTSVClick(Sender: TObject);
    procedure spChooseDFN2Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure bCreateTSVClick(Sender: TObject);
    procedure bOpenExcelClick(Sender: TObject);
  private
    { Private declarations }
    function ContainsCyrillicCharacters(const input: string): Boolean;
    function IsCharCyrillic(c: Char): Boolean;
    function ExtractFieldValue(const field: string): string;
    function ExtractField(const fields: TArray<string>; const fieldName: string): string;
  public
    { Public declarations }

  end;

var
  Form1: TForm1;
  OriginalFileContent: TStringList; // Створюємо глобальну змінну, яка буде зберігати контент відкритого файлу до моменту переобрання або зберігання файлу
  OpenedFilePath: String; // Створюємо глобальну змінну, яка буде зберігати шлях відкритого файлу
  SavedFilePath: String; // Створюємо глобальну змінну для зберігання шляху збереженого tsv файлу для можливості відкрити його в сторонніх програмах
  IsFileCreate: boolean = false;

implementation

{$R *.dfm}

procedure TForm1.bCreateTSVClick(Sender: TObject);

var OutputFileContent: TStringList; // Створюємо змінну для зберігання форматованого контенту файлу

begin
  if OriginalFileContent <> nil then // Перевірка чи був відкритий файл
  begin
      SaveDialog1.FileName := ChangeFileExt(ExtractFileName(OpenedFilePath), '.tsv'); // Отримуємо пропоноване ім'я файлу для зберігання, через ім'я відкритого файлу з заміною формата
      if SaveDialog1.Execute then  // Перевірка чи була натиснута кнопка збереження файлу в діалоговому вікні
      begin
        IsFileCreate := true;
        OutputFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
        try
          OutputFileContent.Add('ID' + #9 + 'Значения' + #9 + 'Перевод'); // Додаємо першу строку в змінну, яка відповідає за форматований контент файлу
          for var i := 0 to OriginalFileContent.Count - 1 do
        begin
          var line := OriginalFileContent[i]; //
          if ContainsCyrillicCharacters(line) and
          (Pos('ID', line) > 0) and (Pos('Orig', line) > 0) and (Pos('Curr', line) > 0) then //
            //OutputFileContent.Add(line);
          begin
            var fields := line.Split([#4]);
            if Length(fields) >= 3 then
            begin
              var id := ExtractFieldValue(ExtractField(fields, 'ID'));
              var orig := ExtractFieldValue(ExtractField(fields, 'Orig'));
              var curr := ExtractFieldValue(ExtractField(fields, 'Curr'));
              OutputFileContent.Add(id + #9 + orig + #9 + curr);
            end;
          end;
        end;
            if Pos('.tsv', SaveDialog1.FileName) > 0 then // Перевірка чи є в імені зберігаємого файлу розширення tsv
              OutputFileContent.SaveToFile(SaveDialog1.FileName) // Запис форматованого контенту в зберігаємий файл
            else
              OutputFileContent.SaveToFile(SaveDialog1.FileName + '.tsv'); // Запис форматованого контенту в зберігаємий файл з дописуванням формату
            SavedFilePath := SaveDialog1.FileName; // Записуємо шлях створеного файлу
            ShowMessage('Файл був успішно сконвертований та збережений у форматі TSV.' + SaveDialog1.FileName);
        finally
          OutputFileContent.Free;
        end;
      end;
  end
  else
    ShowMessage('Спочатку відкрийте файл DFN.');
end;

procedure TForm1.bOpenExcelClick(Sender: TObject);

begin
  if IsFileCreate then
    ShellExecute(0, 'open', 'excel.exe', PChar(SavedFilePath), nil, SW_SHOWNORMAL)
  else
    ShowMessage('Спочатку створіть TSV файл');
end;

function TForm1.ContainsCyrillicCharacters(const input: string): Boolean; // Функція для перевірки чи є слова кирилицею
var i: Integer;
begin
  Result := False;
  for i := 1 to Length(input) do
  begin
    if IsCharCyrillic(input[i]) then
    begin
      Result := True;
      Exit;
    end;
  end;
end;

procedure TForm1.ePath1KeyPress(Sender: TObject; var Key: Char);

var FilePath: string;

begin
  if (Key = #13) then // Якщо була натиснута клавіша #13 - код клавіші "Enter"
  begin
    FilePath := ePath1.Text; // Записуємо шлях, який був вписаний в відповідне поле "edit"
    if FileExists(FilePath) then // Перевірка чи існує файл
    begin
      try
        if OriginalFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
          OriginalFileContent.Free; // Звільнюємо попередній вміст, якщо був

        OriginalFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
        OriginalFileContent.LoadFromFile(FilePath); // Записуємо контент з відкритого файлу
        OpenedFilePath := FilePath; // Записуємо шлях відкритого файлу в глобальну змінну
        ShowMessage('Файл відкрито: ' + FilePath);
      except
        on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
      end;
    end
    else
    begin
    ShowMessage('Файл не існує: ' + FilePath); // Якщо був введений не коректний шлях до файлу
    end;
  end;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  OriginalFileContent.Free; // Звільняємо вміст скопійованого контенту з файлу при закритті застосунку.
end;

procedure TForm1.spChooseDFN2Click(Sender: TObject);
begin
  if OpenDialog3.Execute then
  ePath3.Text := OpenDialog3.FileName;
end;

procedure TForm1.spChooseDFNClick(Sender: TObject);
begin
  if OpenDialog1.Execute then // Перевірка чи була натиснута кнопка відкриття обраного файлу
  begin
    try
      if OriginalFileContent <> nil then // Перевірка чи був вже відкритий файл до цього моменту
        OriginalFileContent.Free; // Звільнюємо попередній вміст, якщо був

      ePath1.Text := OpenDialog1.FileName; // Записуємо шлях до файла в відповідне поле "edit"
      OriginalFileContent := TStringList.Create; // Створюємо об'єкт типу TStringList
      OriginalFileContent.LoadFromFile(OpenDialog1.FileName); // Записуємо контент з відкритого файлу
      OpenedFilePath := OpenDialog1.FileName; // Записуємо шлях відкритого файлу в глобальну змінну
      ShowMessage('Файл DFN був відкритий.');
    except
      on E: Exception do
          ShowMessage('Помилка при відкритті файлу: ' + E.Message);
    end;
  end;
end;

procedure TForm1.spChooseTSVClick(Sender: TObject);
begin
  if OpenDialog2.Execute then
  ePath2.Text := OpenDialog2.FileName;
end;

function TForm1.IsCharCyrillic(c: Char): Boolean; // Функція для перевірки чи є літера кирилицею
begin
  Result := (c >= 'А') and (c <= 'Я') or (c >= 'а') and (c <= 'я') or (c = 'Ё') or (c = 'ё');
end;

function TForm1.ExtractFieldValue(const field: string): string;
var
  colonPos: Integer;
  fieldValue: string;
begin
  colonPos := Pos(':', field);
  if colonPos > 0 then
  begin
    fieldValue := Trim(Copy(field, colonPos + 1, MaxInt));
    if (Length(fieldValue) >= 2) and (fieldValue[1] = '''') and (fieldValue[Length(fieldValue)] = '''') then
      Result := Copy(fieldValue, 2, Length(fieldValue) - 2)
    else
      Result := fieldValue;
  end
  else
    Result := '';
end;

function TForm1.ExtractField(const fields: TArray<string>; const fieldName: string): string;
begin
  for var field in fields do
  begin
    if Pos(fieldName, field) > 0 then
      Exit(Trim(Copy(field, Length(fieldName) + 1, MaxInt)));
  end;
  Result := '';
end;

end.
