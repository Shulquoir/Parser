unit TestufMain;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, ufMain, Vcl.Dialogs, Winapi.Windows, Vcl.Buttons, System.SysUtils,
  Vcl.Graphics, System.Variants, ShellAPI, Winapi.Messages, Vcl.StdCtrls, Vcl.Controls,
  Vcl.Forms, Vcl.ExtDlgs, System.Classes;

type
  // Test methods for class TForm1

  TestTForm1 = class(TTestCase)
  strict private
    FForm1: TForm1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestePathDFNKeyPress;
    procedure TestspChooseDFNClick;
    procedure TestspChooseTSVClick;
    procedure TestspChooseDFN2Click;
    procedure TestFormDestroy;
    procedure TestbCreateTSVClick;
    procedure TestbOpenExcelClick;
    procedure TestbOpenCalcClick;
    procedure TestePathTSVKeyPress;
    procedure TestePathDFN2KeyPress;
    procedure TestbWriteDFNClick;
    procedure TestContainsCyrillicCharacters;
    procedure TestIsCharCyrillic;
    procedure TestExtractField;
  end;

implementation

procedure TestTForm1.SetUp;
begin
  FForm1 := TForm1.Create(nil);
end;

procedure TestTForm1.TearDown;
begin
  FForm1.Free;
  FForm1 := nil;
end;

procedure TestTForm1.TestePathDFNKeyPress;
var
  Key: Char;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.ePathDFNKeyPress(Sender, Key);
  // TODO: Validate method results
end;

procedure TestTForm1.TestspChooseDFNClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.spChooseDFNClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestspChooseTSVClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.spChooseTSVClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestspChooseDFN2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.spChooseDFN2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestFormDestroy;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.FormDestroy(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestbCreateTSVClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.bCreateTSVClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestbOpenExcelClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.bOpenExcelClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestbOpenCalcClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.bOpenCalcClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestePathTSVKeyPress;
var
  Key: Char;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.ePathTSVKeyPress(Sender, Key);
  // TODO: Validate method results
end;

procedure TestTForm1.TestePathDFN2KeyPress;
var
  Key: Char;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.ePathDFN2KeyPress(Sender, Key);
  // TODO: Validate method results
end;

procedure TestTForm1.TestbWriteDFNClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FForm1.bWriteDFNClick(Sender);
  // TODO: Validate method results
end;

procedure TestTForm1.TestContainsCyrillicCharacters;
var
  ReturnValue: Boolean;
  input: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm1.ContainsCyrillicCharacters(input);
  // TODO: Validate method results
end;

procedure TestTForm1.TestIsCharCyrillic;
var
  ReturnValue: Boolean;
  c: Char;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm1.IsCharCyrillic(c);
  // TODO: Validate method results
end;

procedure TestTForm1.TestExtractField;
var
  ReturnValue: string;
  fieldName: string;
  fields: TArray<String>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm1.ExtractField(fields, fieldName);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTForm1.Suite);
end.

